"""This is a start-up script for the jupyter notebooks. It initializes some standard libraries 
and functionalities that are then available throughout the notebook.
The script must be included at the very beginning of a Jupyter notebook via
`%run ../jupyter_startup.ipy`
"""

print("Load standard packages and some magic commands, set up logger and matplotlib rcParams.")

%load_ext autoreload
%load_ext jupyternotify

# Load numpy and matplotlib to work interactively.
# %pylab --no-import-all 
%matplotlib inline
# %matplotlib notebook
# %matplotlib tk


# ---------------------------------------------
# import some standard libraries
import sys
import glob
import re
import logging
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
from IPython.core.getipython import get_ipython
from IPython.core.magic import (Magics, magics_class,  cell_magic)
from IPython.display import Javascript
from tqdm.auto import tqdm


# ---------------------------------------------
# Create some custom magic commands
from markdown import markdown
from IPython.core.display import HTML

@magics_class
class MarkdownMagics(Magics):

    @cell_magic
    def important(self, line, cell):
        """Provides a new cell magic that depicts a red-framed panel."""
        if not line:
            line = 'Important'
        return HTML("<div style='border:thick solid red; padding:10px'> \
                     <div style='color:red; font-size:x-large; text-decoration:underline'>{}</div> \
                     <div style='font-weight:bold; font-size:large'>{}</div></div>".format(markdown(line, extensions=['markdown.extensions.extra']),
                                                                                           markdown(cell, extensions=['markdown.extensions.extra'])))

get_ipython().register_magics(MarkdownMagics)


# ---------------------------------------------
# Set pandas and xarray default options
pd.set_option("display.precision", 3)
pd.set_option("display.expand_frame_repr", False)  # Don't wrap repr(DataFrame) across additional lines
pd.set_option("display.max_rows", 25)
xr.set_options(keep_attrs=True)


# ---------------------------------------------
# Set matplotlib default parameters
plt.rcdefaults()
plt.style.use(BASE_DIR/"assets/mpl_styles/white_paper.mplstyle")


# ---------------------------------------------
# Add some custom functions
def alert(msg="All done!"):
    """Pop-up a javascript alert box."""
    js = f"""alert("{msg}");"""
    display(Javascript(js))


# ---------------------------------------------
# Set up logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)
# Create STDERR handler
handler = logging.StreamHandler(sys.stderr)
# Set STDERR handler as the only handler
logger.handlers = [handler]


# ---------------------------------------------
%autoreload 2
%autonotify -a 30 -o


# ---------------------------------------------
# make some standard paths available
from src import BASE_DIR, LOG_DIR, PLOT_DIR, DATA_DIR


# ---------------------------------------------
# Other magic commands:
# ---------------------------------------------
# %quickref
# %set_env
# %lsmagic
# %whos
# %%bash
# %%html
# %%latex
# %%svg
# %dhist  # Print your history of visited directories.
# %dirs   # Return the current directory stack.
# %env
